plugins {
    id 'maven-publish'
    id 'me.modmuss50.remotesign' version '0.1.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'me.modmuss50.remotesign'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.fabricmc.net/' }
    }

    dependencies {
        implementation 'com.google.guava:guava:30.1-jre'
        implementation 'com.google.code.gson:gson:2.8.6'

        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
    }

    group = 'net.fabricmc'
    version = '1.0.0'

    version = version + (System.getenv("GITHUB_ACTIONS") ? "" : "+local")

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    java {
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"

        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release = 8
        }
    }

    publishing {
        publications {
            "$project.name"(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java

                pom {
                    name = project.name
                    description = 'A deobfuscation/remapping tool for Java software.'
                    url = 'https://github.com/FabricMC/Enigma'

                    scm {
                        connection = "scm:git:https://github.com/FabricMC/Enigma.git"
                        developerConnection = "scm:git:git@github.com:FabricMC/Enigma.git"
                        url = "https://github.com/FabricMC/Enigma"
                    }

                    issueManagement {
                        system = "GitHub"
                        url = "https://github.com/FabricMC/Enigma/issues"
                    }

                    licenses {
                        license {
                            name = 'GNU Lesser General Public License v3.0'
                            url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                        }
                    }

                    developers {
                        developer {
                            id = "modmuss50"
                            name = "modmuss50"
                            email = "modmuss50@fabricmc.net"
                        }
                    }
                }
            }
        }
    }

    def ENV = System.getenv()
    if (ENV.SIGNING_SERVER) {
        remoteSign {
            requestUrl ENV.SIGNING_SERVER
            pgpAuthKey ENV.SIGNING_PGP_KEY

            sign publishing.publications.getByName(project.name)
        }
    }
}

allprojects {
    publishing {
        repositories {
            mavenLocal()

            def ENV = System.getenv()
            if (ENV.MAVEN_URL) {
                maven {
                    url ENV.MAVEN_URL
                    credentials {
                        username ENV.MAVEN_USERNAME
                        password ENV.MAVEN_PASSWORD
                    }
                }
            }

            if (ENV.MAVEN_CENTRAL_URL) {
                maven {
                    name "central"
                    url ENV.MAVEN_CENTRAL_URL
                    credentials {
                        username ENV.MAVEN_CENTRAL_USERNAME
                        password ENV.MAVEN_CENTRAL_PASSWORD
                    }
                }
            }
        }
    }
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
    doFirst {
        def xml = new URL("https://maven.fabricmc.net/cuchaz/enigma/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text();
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

publish.mustRunAfter checkVersion